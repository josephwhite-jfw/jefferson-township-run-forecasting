select(
snapshot_month,
mean    = .mean,
lower80 = .lower_80,       # <-- these now exist
upper80 = .upper_80,
lower95 = .lower_95,
upper95 = .upper_95
)
# ────────────────────────────────────────────────────────────────
# forecast_monthly_runs_arimax.R
# Jefferson Township FD – ARIMAX-only monthly run-volume forecasting
# ────────────────────────────────────────────────────────────────
# 0 ▸ packages ----------------------------------------------------
req <- c("tidyverse","here","tsibble","fable","feasts","fabletools")
inst <- rownames(installed.packages())
if(any(!req %in% inst)) install.packages(setdiff(req, inst))
library(tidyverse)
library(here)
library(tsibble)
library(fable)
library(feasts)
library(fabletools)
# 1 ▸ paths -------------------------------------------------------
ROOT      <- here()
CLEAN_DIR <- file.path(ROOT,"data","clean")
OUT_DIR   <- file.path(ROOT,"data","outputs")
dir.create(OUT_DIR, showWarnings = FALSE)
panel_csv <- file.path(CLEAN_DIR,"fire_parcel_panel_monthly.csv")
if(!file.exists(panel_csv)) stop("Panel not found: ", panel_csv)
# 2 ▸ load panel --------------------------------------------------
panel <- read_csv(panel_csv, show_col_types = FALSE) %>%
mutate(snapshot_month = yearmonth(snapshot_month)) %>%
as_tsibble(index = snapshot_month)
# 3 ▸ quick plot --------------------------------------------------
ggsave(
filename = file.path(OUT_DIR,"runs_total_series.png"),
plot     = ggplot(panel, aes(snapshot_month, runs_total)) +
geom_line() +
labs(title="Monthly total runs – Jefferson Township",
x=NULL, y="Runs"),
width    = 7, height = 3
)
# 4 ▸ train / test split -----------------------------------------
train <- panel %>% filter_index(~ "2024 Dec")
test  <- panel %>% filter_index("2025 Jan" ~ .)
# 5 ▸ ARIMAX specification & fit ---------------------------------
xreg <- c("sqft_total","nh_residents_total","pct_multistory",
"month_sin","month_cos")
# formula: runs_total ~ ARIMA(auto) + exogenous
arimax_fit <- train %>%
model(
arimax = ARIMA(
runs_total ~ sqft_total + nh_residents_total +
pct_multistory + month_sin + month_cos
)
)
# 6 ▸ accuracy on 2025-Jan–Jul hold-out --------------------------
fc_test <- forecast(arimax_fit, new_data = test)
acc_arimax <- accuracy(fc_test, test)
write_csv(acc_arimax, file.path(OUT_DIR,"arimax_accuracy.csv"))
print(acc_arimax)
# 7 ▸ refit ARIMAX on full panel ---------------------------------
arimax_full <- panel %>%
model(
arimax = ARIMA(
runs_total ~ sqft_total + nh_residents_total +
pct_multistory + month_sin + month_cos
)
)
# 8 ▸ build 12-mo future horizon with last-obs x-regs ------------
last_regs <- panel %>% slice_tail(n = 1) %>% select(all_of(xreg))
future     <- panel %>% new_data(n = 12)
for(col in xreg) {
future[[col]] <- last_regs[[col]]
}
# 9 ▸ forecast & save --------------------------------------------
fc_future <- forecast(arimax_full, new_data = future)
write_csv(fc_future, file.path(OUT_DIR,"monthly_run_forecast_arimax.csv"))
ggsave(
filename = file.path(OUT_DIR,"forecast_plot_arimax.png"),
plot     = autoplot(fc_future, panel) +
labs(title="12-month ARIMAX forecast – runs_total",
x=NULL, y="Runs"),
width    = 7, height = 4
)
message("✓ Finished – ARIMAX pipeline complete. Outputs in data/outputs/")
# ────────────────────────────────────────────────────────────────
# DROP-IN: ARIMAX via forecast::auto.arima()
#   • dynamic ETS drivers
#   • explicit 80/95% intervals
# ────────────────────────────────────────────────────────────────
# (needs: tidyverse, tsibble, lubridate, forecast, ggplot2, here)
# 1) Build 12-month future skeleton
future <- panel %>% new_data(n = 12)
# 2) ETS-forecast each driver as base R ts
start_year  <- year(panel$snapshot_month[1])
start_month <- month(panel$snapshot_month[1])
sqft_ts <- ts(panel$sqft_total,
start = c(start_year, start_month),
frequency = 12)
nh_ts   <- ts(panel$nh_residents_total,
start = c(start_year, start_month),
frequency = 12)
sqft_pred <- forecast::forecast(forecast::ets(sqft_ts), h = 12)$mean
nh_pred   <- forecast::forecast(forecast::ets(nh_ts),   h = 12)$mean
# 3) Inject those forecasts + recompute seasonals into `future`
future <- future %>%
mutate(
sqft_total         = as.numeric(sqft_pred),
nh_residents_total = as.numeric(nh_pred),
m                  = month(snapshot_month),
month_sin          = sin(2 * pi * m / 12),
month_cos          = cos(2 * pi * m / 12)
) %>%
select(-m)
# 4) Prep training vectors/matrices for auto.arima
y_train    <- panel$runs_total
xreg_train <- panel %>%
mutate(
m = month(snapshot_month),
month_sin = sin(2 * pi * m/12),
month_cos = cos(2 * pi * m/12)
) %>%
select(sqft_total, nh_residents_total, month_sin, month_cos) %>%
as.matrix()
xreg_future <- future %>%
select(sqft_total, nh_residents_total, month_sin, month_cos) %>%
as.matrix()
# 5) Fit ARIMA with external regressors
arm_fit <- forecast::auto.arima(
y_train,
xreg        = xreg_train,
seasonal    = TRUE,
stepwise    = FALSE,
approximation = FALSE
)
# ────────────────────────────────────────────────────────────────
# forecast_monthly_runs_arimax.R
# Jefferson Township FD – ARIMAX-only monthly run-volume forecasting
# ────────────────────────────────────────────────────────────────
# 0 ▸ packages ----------------------------------------------------
req <- c("tidyverse","here","tsibble","fable","feasts","fabletools")
inst <- rownames(installed.packages())
if(any(!req %in% inst)) install.packages(setdiff(req, inst))
library(tidyverse)
library(here)
library(tsibble)
library(fable)
library(feasts)
library(fabletools)
# 1 ▸ paths -------------------------------------------------------
ROOT      <- here()
CLEAN_DIR <- file.path(ROOT,"data","clean")
OUT_DIR   <- file.path(ROOT,"data","outputs")
dir.create(OUT_DIR, showWarnings = FALSE)
panel_csv <- file.path(CLEAN_DIR,"fire_parcel_panel_monthly.csv")
if(!file.exists(panel_csv)) stop("Panel not found: ", panel_csv)
# 2 ▸ load panel --------------------------------------------------
panel <- read_csv(panel_csv, show_col_types = FALSE) %>%
mutate(snapshot_month = yearmonth(snapshot_month)) %>%
as_tsibble(index = snapshot_month)
# 3 ▸ quick plot --------------------------------------------------
ggsave(
filename = file.path(OUT_DIR,"runs_total_series.png"),
plot     = ggplot(panel, aes(snapshot_month, runs_total)) +
geom_line() +
labs(title="Monthly total runs – Jefferson Township",
x=NULL, y="Runs"),
width    = 7, height = 3
)
# 4 ▸ train / test split -----------------------------------------
train <- panel %>% filter_index(~ "2024 Dec")
test  <- panel %>% filter_index("2025 Jan" ~ .)
# 5 ▸ ARIMAX specification & fit ---------------------------------
xreg <- c("sqft_total","nh_residents_total","pct_multistory",
"month_sin","month_cos")
# formula: runs_total ~ ARIMA(auto) + exogenous
arimax_fit <- train %>%
model(
arimax = ARIMA(
runs_total ~ sqft_total + nh_residents_total +
pct_multistory + month_sin + month_cos
)
)
# 6 ▸ accuracy on 2025-Jan–Jul hold-out --------------------------
fc_test <- forecast(arimax_fit, new_data = test)
acc_arimax <- accuracy(fc_test, test)
write_csv(acc_arimax, file.path(OUT_DIR,"arimax_accuracy.csv"))
print(acc_arimax)
# 7 ▸ refit ARIMAX on full panel ---------------------------------
arimax_full <- panel %>%
model(
arimax = ARIMA(
runs_total ~ sqft_total + nh_residents_total +
pct_multistory + month_sin + month_cos
)
)
# 8 ▸ build 12-mo future horizon with last-obs x-regs ------------
last_regs <- panel %>% slice_tail(n = 1) %>% select(all_of(xreg))
future     <- panel %>% new_data(n = 12)
for(col in xreg) {
future[[col]] <- last_regs[[col]]
}
# 9 ▸ forecast & save --------------------------------------------
fc_future <- forecast(arimax_full, new_data = future)
write_csv(fc_future, file.path(OUT_DIR,"monthly_run_forecast_arimax.csv"))
ggsave(
filename = file.path(OUT_DIR,"forecast_plot_arimax.png"),
plot     = autoplot(fc_future, panel) +
labs(title="12-month ARIMAX forecast – runs_total",
x=NULL, y="Runs"),
width    = 7, height = 4
)
message("✓ Finished – ARIMAX pipeline complete. Outputs in data/outputs/")
# ────────────────────────────────────────────────────────────────
# DROP-IN: ARIMAX via forecast::auto.arima()
#   • dynamic ETS drivers
#   • explicit 80/95% intervals
# ────────────────────────────────────────────────────────────────
# (needs: tidyverse, tsibble, lubridate, forecast, ggplot2, here)
# 1) Build 12-month future skeleton
future <- panel %>% new_data(n = 12)
# 2) ETS-forecast each driver as base R ts
start_year  <- year(panel$snapshot_month[1])
start_month <- month(panel$snapshot_month[1])
sqft_ts <- ts(panel$sqft_total,
start = c(start_year, start_month),
frequency = 12)
nh_ts   <- ts(panel$nh_residents_total,
start = c(start_year, start_month),
frequency = 12)
sqft_pred <- forecast::forecast(forecast::ets(sqft_ts), h = 12)$mean
nh_pred   <- forecast::forecast(forecast::ets(nh_ts),   h = 12)$mean
# 3) Inject those forecasts + recompute seasonals into `future`
future <- future %>%
mutate(
sqft_total         = as.numeric(sqft_pred),
nh_residents_total = as.numeric(nh_pred),
m                  = month(snapshot_month),
month_sin          = sin(2 * pi * m / 12),
month_cos          = cos(2 * pi * m / 12)
) %>%
select(-m)
# ────────────────────────────────────────────────────────────────
# STEPS 4–6: Build true numeric xreg matrices + fit auto.arima
# ────────────────────────────────────────────────────────────────
library(forecast)
library(lubridate)
# 4) Prepare a clean panel with seasonals
p2 <- panel %>%
mutate(
m = month(snapshot_month),
month_sin = sin(2 * pi * m / 12),
month_cos = cos(2 * pi * m / 12)
)
# 5) Extract y_train and a pure numeric xreg matrix
y_train    <- p2$runs_total
xreg_train <- as.matrix(p2[, c("sqft_total",
"nh_residents_total",
"month_sin",
"month_cos")])
# 6) Build the matching xreg_future matrix
#    (ensure future has the same seasonals & driver forecasts)
future2 <- future %>%
mutate(
m = month(snapshot_month),
month_sin = sin(2 * pi * m / 12),
month_cos = cos(2 * pi * m / 12)
)
xreg_future <- as.matrix(future2[, c("sqft_total",
"nh_residents_total",
"month_sin",
"month_cos")])
# 7) Fit & forecast
arm_fit <- auto.arima(
y_train,
xreg         = xreg_train,
seasonal     = TRUE,
stepwise     = FALSE,
approximation= FALSE
)
arm_fc <- forecast(
arm_fit,
xreg  = xreg_future,
h     = 12,
level = c(80,95)
)
# 8) Save CSV
write_csv(fc_out, file.path(OUT_DIR, "forecast_auto_arima.csv"))
# ────────────────────────────────────────────────────────────────
# forecast_monthly_runs_arimax.R
# Jefferson Township FD – ARIMAX-only monthly run-volume forecasting
# ────────────────────────────────────────────────────────────────
# 0 ▸ packages ----------------------------------------------------
req <- c("tidyverse","here","tsibble","fable","feasts","fabletools")
inst <- rownames(installed.packages())
if(any(!req %in% inst)) install.packages(setdiff(req, inst))
library(tidyverse)
library(here)
library(tsibble)
library(fable)
library(feasts)
library(fabletools)
# 1 ▸ paths -------------------------------------------------------
ROOT      <- here()
CLEAN_DIR <- file.path(ROOT,"data","clean")
OUT_DIR   <- file.path(ROOT,"data","outputs")
dir.create(OUT_DIR, showWarnings = FALSE)
panel_csv <- file.path(CLEAN_DIR,"fire_parcel_panel_monthly.csv")
if(!file.exists(panel_csv)) stop("Panel not found: ", panel_csv)
# 2 ▸ load panel --------------------------------------------------
panel <- read_csv(panel_csv, show_col_types = FALSE) %>%
mutate(snapshot_month = yearmonth(snapshot_month)) %>%
as_tsibble(index = snapshot_month)
# 3 ▸ quick plot --------------------------------------------------
ggsave(
filename = file.path(OUT_DIR,"runs_total_series.png"),
plot     = ggplot(panel, aes(snapshot_month, runs_total)) +
geom_line() +
labs(title="Monthly total runs – Jefferson Township",
x=NULL, y="Runs"),
width    = 7, height = 3
)
# 4 ▸ train / test split -----------------------------------------
train <- panel %>% filter_index(~ "2024 Dec")
test  <- panel %>% filter_index("2025 Jan" ~ .)
# 5 ▸ ARIMAX specification & fit ---------------------------------
xreg <- c("sqft_total","nh_residents_total","pct_multistory",
"month_sin","month_cos")
# formula: runs_total ~ ARIMA(auto) + exogenous
arimax_fit <- train %>%
model(
arimax = ARIMA(
runs_total ~ sqft_total + nh_residents_total +
pct_multistory + month_sin + month_cos
)
)
# 6 ▸ accuracy on 2025-Jan–Jul hold-out --------------------------
fc_test <- forecast(arimax_fit, new_data = test)
acc_arimax <- accuracy(fc_test, test)
write_csv(acc_arimax, file.path(OUT_DIR,"arimax_accuracy.csv"))
print(acc_arimax)
# 7 ▸ refit ARIMAX on full panel ---------------------------------
arimax_full <- panel %>%
model(
arimax = ARIMA(
runs_total ~ sqft_total + nh_residents_total +
pct_multistory + month_sin + month_cos
)
)
# 8 ▸ build 12-mo future horizon with last-obs x-regs ------------
last_regs <- panel %>% slice_tail(n = 1) %>% select(all_of(xreg))
future     <- panel %>% new_data(n = 12)
for(col in xreg) {
future[[col]] <- last_regs[[col]]
}
# 9 ▸ forecast & save --------------------------------------------
fc_future <- forecast(arimax_full, new_data = future)
write_csv(fc_future, file.path(OUT_DIR,"monthly_run_forecast_arimax.csv"))
ggsave(
filename = file.path(OUT_DIR,"forecast_plot_arimax.png"),
plot     = autoplot(fc_future, panel) +
labs(title="12-month ARIMAX forecast – runs_total",
x=NULL, y="Runs"),
width    = 7, height = 4
)
message("✓ Finished – ARIMAX pipeline complete. Outputs in data/outputs/")
# ────────────────────────────────────────────────────────────────
# DROP-IN: ARIMAX via forecast::auto.arima()
#   • dynamic ETS drivers
#   • explicit 80/95% intervals
# ────────────────────────────────────────────────────────────────
# (needs: tidyverse, tsibble, lubridate, forecast, ggplot2, here)
# 1) Build 12-month future skeleton
future <- panel %>% new_data(n = 12)
# 2) ETS-forecast each driver as base R ts
start_year  <- year(panel$snapshot_month[1])
start_month <- month(panel$snapshot_month[1])
sqft_ts <- ts(panel$sqft_total,
start = c(start_year, start_month),
frequency = 12)
nh_ts   <- ts(panel$nh_residents_total,
start = c(start_year, start_month),
frequency = 12)
sqft_pred <- forecast::forecast(forecast::ets(sqft_ts), h = 12)$mean
nh_pred   <- forecast::forecast(forecast::ets(nh_ts),   h = 12)$mean
# 3) Inject those forecasts + recompute seasonals into `future`
future <- future %>%
mutate(
sqft_total         = as.numeric(sqft_pred),
nh_residents_total = as.numeric(nh_pred),
m                  = month(snapshot_month),
month_sin          = sin(2 * pi * m / 12),
month_cos          = cos(2 * pi * m / 12)
) %>%
select(-m)
# ────────────────────────────────────────────────────────────────
# STEPS 4–6: Build true numeric xreg matrices + fit auto.arima
# ────────────────────────────────────────────────────────────────
library(forecast)
library(lubridate)
# 4) Prepare a clean panel with seasonals
p2 <- panel %>%
mutate(
m = month(snapshot_month),
month_sin = sin(2 * pi * m / 12),
month_cos = cos(2 * pi * m / 12)
)
# 5) Extract y_train and a pure numeric xreg matrix
y_train    <- p2$runs_total
xreg_train <- as.matrix(p2[, c("sqft_total",
"nh_residents_total",
"month_sin",
"month_cos")])
# 6) Build the matching xreg_future matrix
#    (ensure future has the same seasonals & driver forecasts)
future2 <- future %>%
mutate(
m = month(snapshot_month),
month_sin = sin(2 * pi * m / 12),
month_cos = cos(2 * pi * m / 12)
)
xreg_future <- as.matrix(future2[, c("sqft_total",
"nh_residents_total",
"month_sin",
"month_cos")])
# 7) Fit & forecast
arm_fit <- auto.arima(
y_train,
xreg         = xreg_train,
seasonal     = TRUE,
stepwise     = FALSE,
approximation= FALSE
)
arm_fc <- forecast(
arm_fit,
xreg  = xreg_future,
h     = 12,
level = c(80,95)
)
# 8) Tidy forecast into a data.frame
library(tibble)
fc_out <- tibble(
snapshot_month = future2$snapshot_month,
mean     = as.numeric(arm_fc$mean),
lower80  = arm_fc$lower[,1],
upper80  = arm_fc$upper[,1],
lower95  = arm_fc$lower[,2],
upper95  = arm_fc$upper[,2]
)
# 9) Save CSV
write_csv(fc_out, file.path(OUT_DIR, "forecast_auto_arima.csv"))
# 10) Plot manually
library(ggplot2)
p <- ggplot() +
geom_line(data = panel, aes(snapshot_month, runs_total)) +
geom_line(data = fc_out, aes(snapshot_month, mean), linetype = "dashed") +
geom_ribbon(data = fc_out, aes(x = snapshot_month, ymin = lower80, ymax = upper80), alpha = 0.3) +
geom_ribbon(data = fc_out, aes(x = snapshot_month, ymin = lower95, ymax = upper95), alpha = 0.2) +
labs(
title = "12-Month ARIMAX Forecast (auto.arima)",
x     = NULL,
y     = "Runs"
)
ggsave(
plot    = p,
filename= file.path(OUT_DIR, "forecast_auto_arima.png"),
width   = 7,
height  = 4
)
message("✓ Finished – auto.arima ARIMAX forecast & plot saved in data/outputs/")
# build xreg for Jan–Jul 2025
test_xreg <- test %>%
mutate(m = month(snapshot_month),
month_sin = sin(2*pi*m/12),
month_cos = cos(2*pi*m/12)) %>%
select(sqft_total, nh_residents_total, month_sin, month_cos) %>%
as.matrix()
fc_test_auto <- forecast(arm_fit, xreg = test_xreg, h = nrow(test), level=0)
# 1) Build test_xreg as a pure numeric matrix
test_xreg <- test %>%
# recompute your simple seasonals
mutate(
m         = month(snapshot_month),
month_sin = sin(2 * pi * m / 12),
month_cos = cos(2 * pi * m / 12)
) %>%
# drop the tsibble index, force a plain data.frame
as.data.frame() %>%
# pick only the numeric regressors
dplyr::select(sqft_total, nh_residents_total, month_sin, month_cos) %>%
# ensure every column is numeric
mutate(across(everything(), as.numeric)) %>%
# finally coerce to a matrix
as.matrix()
# 2) Forecast with matching h = number of rows
h_test <- nrow(test_xreg)
fc_test_auto <- forecast::forecast(
arm_fit,
xreg = test_xreg,
h    = h_test,
level = 0
)
# 3) Compute accuracy against the true runs_total
accuracy_test_auto <- accuracy(fc_test_auto, test$runs_total)
print(accuracy_test_auto)
library(tidyverse)
# 1) read your nursing-home data
nh <- read_csv("/mnt/data/nh_data.csv")
library(tidyverse)
# 1) read your nursing-home data
nh <- read_csv("/mnt/data/raw/nh_data.csv")
